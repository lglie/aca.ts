// The CLI is currently in the internal testing stage
// Note: all identifiers must not start with $ to prevent naming conflicts
// Scalar types supported by class members：id, int, float, string, object(json object), Date，and enum type

import {
  id,
  int,
  float,
  $db, // Database connection configuration type
  $, // Class decorator
  $_, // Member decorator
} from './.misc/.orm'

enum Gender {
  Male,
  Fomale,
  Unkown,
}

// Class pointing to the database
namespace Blog {
  // Each database class has at most one const, and the type is: $db
  // Its value points to the field with the same name in config.json/database. The default is: default
  const dbConfig: $db = 'default'

  @$.unique(['firstName', 'lastName'])
  class user {
    id: id
    firstName: string
    lastName: string
    gender = Gender.Male
    age: int = 25
    married: boolean = true
    detail?: object // json
    // timestamp
    @$_.createdAt created_at?: Date
    // @$_.updatedAt updated_at: Date // Not supported at the moment
    profile?: profile // one-to-one
    posts: ns.post[] // one-to-many
    comments: comment[] // many-to-many
  }

  @$.map('PROF') // Map database table name
  class profile {
    id: id
    // Types supported by the database
    @$_.dbType('char(8)') password: string
    // foreign key
    @$_.foreign('userId')
    user: user
  }

  @$.view('select "user"."id" as "userid", "user"."firstName", "user"."lastName", "user"."gender","user"."age", "profile"."password" from "user" left join "PROF" as "profile" on "user"."id" = "profile"."userId"')
  class userProfile {
    userid: id
    firstName: string
    lastName: string
    gender = Gender.Male
    age: int = 25
    created_at?: Date
    password?: string
  }

  // Supports multi-level namespaces
  namespace ns {
    enum KindEnum {
      Political,
      Economy,
    }

    export class post {
      serial: id
      enum?: KindEnum
      content: string
      score: float
      @$_.foreign({
        keys: ['firstNameId', 'lastNameId'],
        references: ['firstName', 'lastName'],
        onUpdate: 'cascade',
        onDelete: 'cascade',
      })
      author: user
      // If more than one relationship exists between two tables,
      // the remaining relationships must specify the relationship field
      // Like this:
      // @ts-ignore
      comments: comment['post'][]
      categories: category[]
    }

    export class category {
      id: id
      // unique, index constraint
      @$_.unique @$_.index name: string
      posts: post[]
      // self relationship
      @$_.foreign('categoriesId') parent?: category
      children: category[]
      comments: comment[]
    }
  }

  export class comment {
    // 5 ID types can be specified
    id: id['autoincrement']
    topEnum = Gender.Fomale
    rating: string
    category: ns.category[]
    commenter: user[]
    //@ts-ignore
    @$_.foreign('postsId') post: ns.post['comments']
    date: Date = new Date()
  }
}
