
// Class pointing to the database
namespace blog {
  // Each database class has at most one const, and the type is: $db
  // Its value points to the field with the same name in config.json/database. The default is: default
  const dbConfig: $db = 'default'

  export enum Gender {
    Male,
    Fomale,
    Unkown,
  }

  @C.unique(['firstName', 'lastName'])
  export class user {
    id: id
    firstName: string
    lastName: string
    gender = Gender.Male
    age: int = 25
    married: boolean = true
    detail?: object // json
    // timestamp
    @M.createdAt created_at?: Date
    // @M.updatedAt updated_at: Date // Not supported at the moment
    profile?: profile // one-to-one
    posts: ns.post[] // one-to-many
    comments: comment[] // many-to-many
  }

  @C.map('PROF') // Map database table name
  export class profile {
    id: id
    // Types supported by the database
    @M.dbType('char(8)') password: string
    // foreign key
    @M.foreign('userId')
    user: user
  }


  // Supports multi-level namespaces
  export namespace ns {
    export enum KindEnum {
      Political,
      Economy,
    }

    export class post {
      serial: id
      enum?: KindEnum
      content: string
      score: float
      @M.foreign({
        keys: ['firstNameId', 'lastNameId'],
        references: ['firstName', 'lastName'],
        onUpdate: 'cascade',
        onDelete: 'cascade',
      })
      author: user
      // If more than one relationship exists between two tables,
      // the remaining relationships must specify the relationship field
      // Like this:
      // @ts-ignore
      comments: comment['post'][]
      categories: category[]
    }

    export class category {
      id: id
      // unique, index constraint
      @M.unique @M.index name: string
      posts: post[]
      // self relationship
      @M.foreign('categoriesId') parent?: category
      children: category[]
      comments: comment[]
    }
  }

  export class comment {
    id: id['autoincrement']
    topEnum = Gender.Fomale
    rating: string
    category: ns.category[]
    commenter: user[]
    //@ts-ignore
    @M.foreign('postsId') post: ns.post['comments']
    date: Date = new Date()
  }

}
