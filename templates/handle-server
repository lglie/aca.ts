

function $Handle(trx: Knex.Transaction<any, any[]>) {
  const sql: string[] = []
  return async function Iter<Tb extends keyof $TB>({
    query,
    args,
    table,
  }: {
    query: $FindQuery | $AggregateQuery | $MutationQuery
    args?: any
    table?: Tb
  }) {
    // remove undefined
    args = args && JSON.parse(JSON.stringify(args))
    let data

    const mutatedSelect = async (data, select) => {
      let rtn
      if (Array.isArray(data)) {
        if (select) {
          if (Object.keys(select).length) {
            // Whether to contain relational fields
            const yes = Object.values(select).some((v) => typeof v === 'object')
            if (yes) {
              // Extract the id field of data and perform where in query
              const whereIn = data.map((record) =>
                $Att[table].id.reduce((_, v) => (_.push(record[v]), _), [])
              )
              rtn = await this.$Handle({
                query: 'findMany',
                args: {
                  where: {
                    [$Att[table].id.join(',')]: { in: whereIn },
                  },
                  select,
                },
                table,
              })

              rtn = rtn.data
            } else {
              rtn = $RtnSelect(table, data, select)
            }
          } else {
            // Passing an empty object returns all scalar fields
            rtn = data
          }
        } else {
          // Not passing select returns the number of rows affected
          rtn = { data }
        }
      } else {
        if (select) {
          if (Object.keys(select).length) {
            // Whether to contain relational fields
            const yes = Object.values(select).some((v) => typeof v === 'object')
            if (yes) {
              // Extract the id field of data and perform where in query
              rtn = await this.$Handle({
                query: 'findOne',
                args: {
                  where:
                    $Att[table].id.length === 1
                      ? {
                          [$Att[table].id[0]]: data[$Att[table].id[0]],
                        }
                      : {
                          [$Att[table].id.join('_')]: $Att[table].id.reduce(
                            (_, v) => ((_[v] = data[v]), _),
                            {}
                          ),
                        },
                  select,
                },
                table,
              })
              rtn = rtn.data
            } else {
              ;[rtn] = $RtnSelect(table, [data], select)
            }
          } else {
            // Passing an expty onject returns all scalar fields
            rtn = data
          }
        } else {
          // Not passing select returns affected rows
          rtn = data
        }
      }
      return rtn
    }

    switch (query) {
      case 'findOne':
        data = await $Queries(trx, sql).finder(table, {
          where: args.where,
          select: args.select,
        })
        data = data[0]
        break

      case 'findFirst':
        data = await $Queries(trx, sql).finder(table, {
          where: args?.where,
          select: args?.select,
          orderBy: args?.orderBy,
          limit: 1,
        })
        data = data[0]
        break

      case 'findMany':
        data = await $Queries(trx, sql).finder(table, {
          where: args?.where,
          select: args?.select,
          orderBy: args?.orderBy,
          limit: args?.limit,
          offset: args?.offset,
        })
        break

      case 'insert':
        data = await $Queries(trx, sql).insert(
          table,
          args
        )
        if (typeof data === 'object')
          data = Array.isArray(args.data)
            ? data
            : data[0]
        break

      case 'upsert':
        data = await $Queries(trx, sql).upsert(table, {
          where: args.where,
          insert: args.insert,
          update: args.update,
        })

        data = data[0]
        break

      case 'update':
        data = await $Queries(trx, sql).update(table, {
          where: args.where,
          data: args.data,
        })
        data = data[0]
        break

      case 'updateMany':
        data = await $Queries(trx, sql).updateMany(table, {
          where: (<any>args).where,
          data: (<any>args).data,
        })
        break

      case 'delete':
        data = await $Queries(trx, sql).delete(table, {
          where: args.where,
        })
        data = data[0]
        break

      case 'deleteMany':
        data = await $Queries(trx, sql).deleteMany(table, {
          where: (<any>args).where,
        })
        break

      case 'count':
      case 'countDistinct':
      case 'sum':
      case 'sumDistinct':
      case 'avg':
      case 'avgDistinct':
      case 'max':
      case 'mix':
        data = await $Queries(trx, sql).aggregate(table, query, <any>args)
        data = Number(data[0][query.replace('Distinct', '')])
        break
      default:
    }

    if ($MutationQuery[<$MutationQuery>query])
      data = await mutatedSelect(data, args.select)

    data = data ?? null

    return args?.sql ? { data, sql } : { data }
  }
}
